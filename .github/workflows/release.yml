name: Build and Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'
      draft:
        description: 'Is this a draft release? (true/false)'
        required: true
        default: 'false'
      prerelease:
        description: 'Is this a pre-release? (true/false)'
        required: true
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 如有需要可加入 windows，当前仅构建 linux 与 darwin 平台
        os: [linux, darwin]
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.16'

      - name: Build binary for ${{ matrix.os }} ${{ matrix.arch }}
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} CGO_ENABLED=0 go build -o netchecker
          chmod +x netchecker
        shell: bash

      - name: Package binary and config files
        run: |
          mkdir -p package
          # 若是 Windows 平台，可考虑复制 netchecker.exe，否则复制 netchecker
          if [ "${{ matrix.os }}" = "windows" ]; then
            cp netchecker.exe package/
          else
            cp netchecker package/
          fi
          cp config.yml package/
          cp report.tpl package/
          zip -r netchecker-${{ matrix.os }}-${{ matrix.arch }}.zip package
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: netchecker-${{ matrix.os }}-${{ matrix.arch }}
          path: netchecker-${{ matrix.os }}-${{ matrix.arch }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.release_version }}
          release_name: Release ${{ github.event.inputs.release_version }}
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_version }}
          files: artifacts/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}